<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>使用Hexo+NexT搭建个人博客</title>
    <url>/2025/10/22/how-to-build-blog-with-hexo/</url>
    <content><![CDATA[<p>本文介绍Hexo + NexT搭建个人博客。</p>
<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="http://daringfireball.net/projects/markdown/">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h4><p>安装 Hexo 相当简单。然而在安装前，您必须检查电脑中是否已安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/">Node.js</a> (至少nodejs 6.9)</li>
<li><a href="https://git-scm.com/">Git</a></li>
</ul>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>新建完成以后，在指定目录下有如下目录结构：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">|—— _config.yml     <span class="comment"># 网站的配置信息，大部分的配置信息在这里配置</span></span><br><span class="line">|—— package.json    <span class="comment"># 包信息，包括版本和依赖 </span></span><br><span class="line">|—— scaffolds       <span class="comment"># 模板文件夹，当要新建文章时会根据这个文件夹下的模板填充部分内容</span></span><br><span class="line">|—— <span class="built_in">source</span>          <span class="comment"># 用户存放资源的地方</span></span><br><span class="line">|   |—— _drafts     <span class="comment"># 草稿</span></span><br><span class="line">    |—— _posts      <span class="comment"># 文章</span></span><br><span class="line">|—— themes          <span class="comment"># 主题</span></span><br></pre></td></tr></table></figure>

<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>该项主要对上面目录结构中的_config.yml进行配置，只记录在搭建个人博客时使用的配置，其他请读者执行了解。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 标题修改</span></span><br><span class="line">title: 红豆的专栏</span><br><span class="line"><span class="comment"># 作者修改</span></span><br><span class="line">author: 红豆</span><br><span class="line"><span class="comment"># 语言的修改，默认是英文，修改为中文</span></span><br><span class="line">language: zh-CN</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改主题为NexT，后面会介绍</span></span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"><span class="comment"># 部署配置</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: https://github.com/自己ID/自己ID..io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure>

<h4 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h4><p>新建一个网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>生成静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全称</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-d, –deploy</td>
<td>文件生成后立即部署网站</td>
</tr>
<tr>
<td>-w, –watch</td>
<td>监视文件变动</td>
</tr>
</tbody></table>
<p>启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全称</span></span><br><span class="line">hexo server </span><br><span class="line"><span class="comment"># 简写 </span></span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>部署网站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 全称</span></span><br><span class="line">hexo deploy</span><br><span class="line"><span class="comment"># 简写</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>选项</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>-g, –generate</td>
<td>部署网站之前先生成静态文件</td>
</tr>
</tbody></table>
<p>清理缓存文件（db.json）已经publish目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>



<h3 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h3><p>hexo下有多个主题可以使用，本人搭建博客时使用的就是NexT主题，该主题简洁漂亮大方。</p>
<h4 id="下载NexT主题"><a href="#下载NexT主题" class="headerlink" title="下载NexT主题"></a>下载NexT主题</h4><p>在当前博客根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>主题配置路径themes&#x2F;next&#x2F;_config.yml</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 有多种模式可以选择</span></span><br><span class="line">scheme: Pisces</span><br><span class="line"></span><br><span class="line">menu:</span><br><span class="line">  <span class="comment"># 显示主页</span></span><br><span class="line">  home: / || home  </span><br><span class="line">  <span class="comment"># 显示关于</span></span><br><span class="line">  about: /about/ || user</span><br><span class="line">  <span class="comment"># 显示标签</span></span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  <span class="comment"># 显示分类</span></span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  <span class="comment"># 显示归档</span></span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<h3 id="新建页面"><a href="#新建页面" class="headerlink" title="新建页面"></a>新建页面</h3><p>在主题中配置标签、分类菜单后还不能正常显示，需要新建关于、标签、分类页面</p>
<h4 id="新建关于页面"><a href="#新建关于页面" class="headerlink" title="新建关于页面"></a>新建关于页面</h4><p>在博客所在的根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>

<p>执行上面命令后会在source&#x2F;about目录下生成一个index.md，修改index.md，介绍自己。</p>
<h4 id="新建标签页面"><a href="#新建标签页面" class="headerlink" title="新建标签页面"></a>新建标签页面</h4><p>在博客所在的根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

<p>执行上面命令后会在source&#x2F;tags目录下生成一个index.md，修改index.md，在最顶部添加type: “tags”</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 所有标签</span><br><span class="line">date: 2019-07-07 15:11:51</span><br><span class="line"><span class="section">type: &quot;tags&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>给文章添加标签</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用Hexo+NexT搭建个人博客</span><br><span class="line">date: 2019-07-07 14:53:50</span><br><span class="line"><span class="section"># 添加tags属性，多个标签使用数组的形式</span></span><br><span class="line"><span class="section">tags: []</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h4 id="新建分类页面"><a href="#新建分类页面" class="headerlink" title="新建分类页面"></a>新建分类页面</h4><p>在博客所在的根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>



<p>执行上面命令后会在source&#x2F;categories目录下生成一个index.md，修改index.md，在最顶部添加type: “categories”</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 所有分类</span><br><span class="line">date: 2019-07-07 15:08:40</span><br><span class="line"><span class="section">type: &quot;categories&quot;</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<p>给文章添加分类</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 使用Hexo+NexT搭建个人博客</span><br><span class="line">date: 2019-07-07 14:53:50</span><br><span class="line"><span class="section">categories: 技术</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h4 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h4><p>在博客所在的根目录下执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new post post-title</span><br><span class="line">或者</span><br><span class="line">hexo new <span class="string">&quot;post title&quot;</span></span><br></pre></td></tr></table></figure>

<p>执行上面命令后会在source&#x2F;_posts目录下生成一个post-title.md，新增内容，发布新的文章</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 当前文章大标题</span></span><br><span class="line">title: 使用Hexo+NexT搭建个人博客</span><br><span class="line"><span class="section"># 文章创建时间</span></span><br><span class="line">date: 2019-07-07 14:53:50</span><br><span class="line"><span class="section"># 当前文章的标签</span></span><br><span class="line">tags: [Hexo, NexT]</span><br><span class="line"><span class="section"># 当前文章所属的分类</span></span><br><span class="line">categories: 建站</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>建站</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js依赖版本说明</title>
    <url>/2025/10/23/nodejs-dependency-description/</url>
    <content><![CDATA[<p>在 Node.js 项目中，<code>package.json</code> 中的依赖版本号遵循 <strong>语义化版本（Semantic Versioning, SemVer）</strong> 规范，其格式与符号前缀直接影响依赖的安装策略和更新范围。本文将详细梳理常见的依赖版本说明方式及使用场景。</p>
<h2 id="一、语义化版本基础规范"><a href="#一、语义化版本基础规范" class="headerlink" title="一、语义化版本基础规范"></a>一、语义化版本基础规范</h2><p>所有版本号的核心格式为：<code>主版本号.次版本号.补丁版本号</code>（即 <code>x.y.z</code>），各部分含义如下：</p>
<ul>
<li><strong>主版本号（x）</strong>：不兼容的 API 变更（Breaking Changes）</li>
<li><strong>次版本号（y）</strong>：向后兼容的功能新增</li>
<li><strong>补丁版本号（z）</strong>：向后兼容的问题修复</li>
</ul>
<h2 id="二、常见依赖版本说明方式"><a href="#二、常见依赖版本说明方式" class="headerlink" title="二、常见依赖版本说明方式"></a>二、常见依赖版本说明方式</h2><h3 id="1-精确版本（无符号前缀）"><a href="#1-精确版本（无符号前缀）" class="headerlink" title="1. 精确版本（无符号前缀）"></a>1. 精确版本（无符号前缀）</h3><ul>
<li><p><strong>格式</strong>：<code>x.y.z</code>（无任何符号前缀）</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;lodash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.17.21&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>：仅安装指定的精确版本，不会自动更新到任何其他版本（包括补丁和次要版本），确保依赖版本完全一致。</p>
</li>
<li><p><strong>适用场景</strong>：生产环境中对版本稳定性要求极高的核心依赖。</p>
</li>
</ul>
<h3 id="2-兼容补丁版本（-符号）"><a href="#2-兼容补丁版本（-符号）" class="headerlink" title="2. 兼容补丁版本（^ 符号）"></a>2. 兼容补丁版本（^ 符号）</h3><ul>
<li><p><strong>格式</strong>：<code>^x.y.z</code></p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^18.2.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>：允许更新 <strong>补丁版本</strong> 和 <strong>次要版本</strong>，禁止主版本更新（主版本变更可能包含不兼容修改）：</p>
<ul>
<li>示例中可安装 <code>18.2.1</code>、<code>18.3.0</code> 等，禁止 <code>19.0.0</code></li>
<li>特殊情况：主版本号为 <code>0</code>（如 <code>^0.2.3</code>）时，仅允许补丁版本更新（开发阶段避免意外变更）</li>
</ul>
</li>
<li><p><strong>适用场景</strong>：生产环境中需要平衡稳定性和安全性的依赖（可自动接收 bug 修复和功能更新）。</p>
</li>
</ul>
<h3 id="3-兼容次要版本（-符号）"><a href="#3-兼容次要版本（-符号）" class="headerlink" title="3. 兼容次要版本（~ 符号）"></a>3. 兼容次要版本（~ 符号）</h3><ul>
<li><p><strong>格式</strong>：<code>~x.y.z</code></p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~3.3.4&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>：仅允许更新 <strong>补丁版本</strong>，禁止次要版本和主版本更新：</p>
<ul>
<li>示例中可安装 <code>3.3.5</code>、<code>3.3.6</code> 等，禁止 <code>3.4.0</code> 或 <code>4.0.0</code></li>
</ul>
</li>
<li><p><strong>适用场景</strong>：需要严格控制功能范围，仅接收 bug 修复的生产环境依赖。</p>
</li>
</ul>
<h3 id="4-版本范围（比较符号-范围符）"><a href="#4-版本范围（比较符号-范围符）" class="headerlink" title="4. 版本范围（比较符号 &#x2F; 范围符）"></a>4. 版本范围（比较符号 &#x2F; 范围符）</h3><p>通过比较符号或 <code>-</code> 定义允许的版本范围，支持多条件组合：</p>
<ul>
<li><p><strong>格式示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;axios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;0.27.0&quot;</span><span class="punctuation">,</span>          <span class="comment">// 大于 0.27.0 的版本</span></span><br><span class="line"><span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;=5.0.0 &lt;6.0.0&quot;</span><span class="punctuation">,</span> <span class="comment">// 5.0.0 及以上，且小于 6.0.0（不含6.0.0）</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.5.0 - 4.9.0&quot;</span><span class="comment">// 4.5.0 到 4.9.0 之间（包含两端版本）</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>支持符号</strong>：<code>&gt;</code>（大于）、<code>&lt;</code>（小于）、<code>&gt;=</code>（大于等于）、<code>&lt;=</code>（小于等于）、<code>-</code>（范围连接）</p>
</li>
<li><p><strong>适用场景</strong>：需要限定依赖版本在特定区间内的场景（如兼容旧版 API）。</p>
</li>
</ul>
<h3 id="5-最新版本（-或-latest）"><a href="#5-最新版本（-或-latest）" class="headerlink" title="5. 最新版本（* 或 latest）"></a>5. 最新版本（* 或 latest）</h3><ul>
<li><p><strong>格式</strong>：<code>*</code>（任意版本）或 <code>&quot;latest&quot;</code>（最新发布版本）</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lodash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;*&quot;</span><span class="punctuation">,</span>          <span class="comment">// 等同于 &quot;latest&quot;</span></span><br><span class="line">  <span class="attr">&quot;moment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;latest&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>：自动安装该依赖的最新发布版本，无需手动指定版本号。</p>
</li>
<li><p><strong>注意</strong>：<strong>不推荐生产环境使用</strong>，可能因主版本更新引入不兼容变更。</p>
</li>
<li><p><strong>适用场景</strong>：开发环境临时依赖或非核心工具类依赖。</p>
</li>
</ul>
<h3 id="6-预发布版本（alpha-beta-rc）"><a href="#6-预发布版本（alpha-beta-rc）" class="headerlink" title="6. 预发布版本（alpha&#x2F;beta&#x2F;rc）"></a>6. 预发布版本（alpha&#x2F;beta&#x2F;rc）</h3><ul>
<li><p><strong>格式</strong>：<code>x.y.z-预发布标签</code>（标签常用 <code>alpha</code>、<code>beta</code>、<code>rc</code>）</p>
</li>
<li><p><strong>示例</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;next&quot;</span><span class="punctuation">:</span> <span class="string">&quot;14.0.0-beta.1&quot;</span><span class="punctuation">,</span>  <span class="comment">// Beta 测试版</span></span><br><span class="line">  <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19.0.0-alpha.3&quot;</span> <span class="comment">// Alpha 开发版</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>说明</strong>：指定安装预发布版本，用于测试新功能或验证兼容性。</p>
</li>
<li><p><strong>适用场景</strong>：开发环境中提前适配依赖的新特性。</p>
</li>
</ul>
<h3 id="7-本地依赖与-Git-依赖"><a href="#7-本地依赖与-Git-依赖" class="headerlink" title="7. 本地依赖与 Git 依赖"></a>7. 本地依赖与 Git 依赖</h3><p>除 SemVer 格式外，还支持直接引用本地包或 Git 仓库：</p>
<ul>
<li><p><strong>本地路径依赖</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;my-local-package&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file:../local-package&quot;</span> <span class="comment">// 引用本地目录中的包</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>适用场景：本地开发中的私有包测试。</li>
</ul>
</li>
<li><p><strong>Git 仓库依赖</strong>：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/vuejs/vue.git#v3.3.4&quot;</span> <span class="comment">// 指定Git仓库+版本标签</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>格式说明：<code>git+仓库地址#版本标识</code>（版本标识可为 tag、branch 或 commit 哈希）</li>
</ul>
</li>
<li><p>适用场景：需要使用依赖的特定 Git 分支或未发布版本。</p>
</li>
</ul>
<h2 id="三、依赖分类与安装命令"><a href="#三、依赖分类与安装命令" class="headerlink" title="三、依赖分类与安装命令"></a>三、依赖分类与安装命令</h2><h3 id="1-依赖分类"><a href="#1-依赖分类" class="headerlink" title="1. 依赖分类"></a>1. 依赖分类</h3><ul>
<li><strong><code>dependencies</code></strong>：生产环境依赖，会被打包到最终产物（如前端构建产物、Node.js 服务代码）。<ul>
<li>安装命令：<code>npm install &lt;package&gt;</code> 或 <code>yarn add &lt;package&gt;</code></li>
</ul>
</li>
<li><strong><code>devDependencies</code></strong>：开发环境依赖（如构建工具、测试框架、代码检查工具），不参与生产环境打包。<ul>
<li>安装命令：<code>npm install --save-dev &lt;package&gt;</code> 或 <code>yarn add --dev &lt;package&gt;</code></li>
</ul>
</li>
</ul>
<h3 id="2-版本锁定机制"><a href="#2-版本锁定机制" class="headerlink" title="2. 版本锁定机制"></a>2. 版本锁定机制</h3><ul>
<li><code>package-lock.json</code>（npm）&#x2F; <code>yarn.lock</code>（Yarn）：自动生成的锁定文件，记录依赖的精确版本（包括间接依赖），确保团队成员、CI&#x2F;CD 环境安装完全一致的依赖。</li>
<li>注意：提交代码时需将锁定文件纳入版本控制（Git），避免因依赖版本差异导致的环境问题。</li>
</ul>
<h2 id="四、最佳实践"><a href="#四、最佳实践" class="headerlink" title="四、最佳实践"></a>四、最佳实践</h2><ol>
<li><strong>生产环境</strong>：优先使用 <code>^x.y.z</code>（兼容补丁和次要版本）或精确版本，避免 <code>*</code>、<code>latest</code> 或大范围版本范围，降低版本变更风险。</li>
<li><strong>开发环境</strong>：可使用 <code>^</code> 或 <code>~</code>，方便接收工具类依赖的更新。</li>
<li><strong>核心依赖</strong>：对影响系统稳定性的核心依赖（如框架、数据库驱动），建议使用精确版本或 <code>~</code> 符号，严格控制更新范围。</li>
<li><strong>预发布版本</strong>：仅在开发 &#x2F; 测试环境使用，禁止直接用于生产环境。</li>
<li><strong>版本锁定</strong>：务必提交 <code>package-lock.json</code>&#x2F;<code>yarn.lock</code>，确保多环境一致性。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot启动参数加载</title>
    <url>/2025/10/30/springboot-parameters-load/</url>
    <content><![CDATA[<p>在 Spring Boot 以 JAR 包形式启动时，不同类型的参数（如 JVM 参数、应用参数、Spring 配置参数等）的位置和作用各不相同，错误的位置可能导致参数不生效。以下是详细说明：</p>
<h3 id="一、参数类型及位置规则"><a href="#一、参数类型及位置规则" class="headerlink" title="一、参数类型及位置规则"></a>一、参数类型及位置规则</h3><p>Spring Boot JAR 启动命令的基本格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java [JVM参数] -jar [jar包路径] [应用参数/Spring参数]</span><br></pre></td></tr></table></figure>

<p><strong>核心规则</strong>：</p>
<ul>
<li><strong>JVM 参数</strong> 必须放在 <code>-jar</code> 前面。</li>
<li><strong>应用参数 &#x2F; Spring 配置参数</strong> 必须放在 <code>-jar</code> 后面（即 JAR 包路径之后）。</li>
</ul>
<h3 id="二、具体参数类型及示例"><a href="#二、具体参数类型及示例" class="headerlink" title="二、具体参数类型及示例"></a>二、具体参数类型及示例</h3><h4 id="1-JVM-参数（放在-jar-前面）"><a href="#1-JVM-参数（放在-jar-前面）" class="headerlink" title="1. JVM 参数（放在 -jar 前面）"></a>1. JVM 参数（放在 <code>-jar</code> 前面）</h4><p>用于配置 JVM 运行环境（如内存、编码、系统属性等），格式通常为 <code>-Dkey=value</code> 或 <code>-Xxx</code>。</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>系统属性</td>
<td><code>-Dspring.profiles.active=prod</code></td>
<td>通过 <code>-D</code> 定义，会被 Spring 识别为配置参数（等效于 <code>application.yml</code> 中的配置）</td>
</tr>
<tr>
<td>JVM 内存配置</td>
<td><code>-Xms512m -Xmx1024m</code></td>
<td>初始 &#x2F; 最大堆内存，必须放在 <code>-jar</code> 前</td>
</tr>
<tr>
<td>编码配置</td>
<td><code>-Dfile.encoding=UTF-8</code></td>
<td>配置系统文件编码</td>
</tr>
</tbody></table>
<p><strong>示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Xms512m -Xmx1024m -Dspring.profiles.active=prod -jar app.jar</span><br></pre></td></tr></table></figure>

<h4 id="2-应用参数（放在-jar-后面）"><a href="#2-应用参数（放在-jar-后面）" class="headerlink" title="2. 应用参数（放在 -jar 后面）"></a>2. 应用参数（放在 <code>-jar</code> 后面）</h4><p>分为两种：<strong>Spring 配置参数</strong>（覆盖 <code>application.yml</code> 配置）和 <strong>自定义业务参数</strong>（供代码中读取）。</p>
<h5 id="（1）Spring-配置参数（-key-value-格式）"><a href="#（1）Spring-配置参数（-key-value-格式）" class="headerlink" title="（1）Spring 配置参数（--key=value 格式）"></a>（1）Spring 配置参数（<code>--key=value</code> 格式）</h5><p>用于覆盖 <code>application.yml</code> 或 <code>application.properties</code> 中的配置，格式为 <code>--key=value</code>（等效于 <code>-D</code> 参数，但位置不同）。</p>
<p><strong>示例</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --server.port=8081 --spring.datasource.url=jdbc:mysql://localhost:3306/db</span><br></pre></td></tr></table></figure>

<ul>
<li><p>等效于在 <code>application.yml</code> 中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（2）自定义业务参数（无固定格式，供代码读取）"><a href="#（2）自定义业务参数（无固定格式，供代码读取）" class="headerlink" title="（2）自定义业务参数（无固定格式，供代码读取）"></a>（2）自定义业务参数（无固定格式，供代码读取）</h5><p>非 Spring 内置的参数，通常用于传递业务开关、临时参数等，需在代码中通过 <code>args</code> 数组读取。</p>
<p><strong>示例</strong>：</p>
<p>启动命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --<span class="built_in">env</span>=<span class="built_in">test</span> --debug=<span class="literal">true</span> 12345</span><br></pre></td></tr></table></figure>

<p>代码中读取（在 <code>main</code> 方法中）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// args 数组会接收所有 `-jar` 后面的参数</span></span><br><span class="line">        <span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;参数：&quot;</span> + arg); <span class="comment">// 输出：--env=test、--debug=true、12345</span></span><br><span class="line">        &#125;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-特殊参数：短横线参数（-key-value）"><a href="#3-特殊参数：短横线参数（-key-value）" class="headerlink" title="3. 特殊参数：短横线参数（-key=value）"></a>3. 特殊参数：短横线参数（<code>-key=value</code>）</h4><p>Spring Boot 也支持短横线格式（<code>-key=value</code>），功能与 <code>--key=value</code> 一致，用于覆盖 Spring 配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar app.jar -server.port=8081 -spring.profiles.active=dev</span><br></pre></td></tr></table></figure>

<ul>
<li>注意：短横线参数仅推荐用于 Spring 配置，自定义参数建议用 <code>--</code> 或无符号格式，避免歧义。</li>
</ul>
<h3 id="三、常见错误及注意事项"><a href="#三、常见错误及注意事项" class="headerlink" title="三、常见错误及注意事项"></a>三、常见错误及注意事项</h3><ol>
<li><p><strong>JVM 参数放错位置</strong>：</p>
<p>错误：<code>java -jar app.jar -Xmx1024m</code>（<code>-Xmx</code> 是 JVM 参数，必须在 <code>-jar</code> 前）</p>
<p>正确：<code>java -Xmx1024m -jar app.jar</code></p>
</li>
<li><p><strong>Spring 配置参数放错位置</strong>：</p>
<p>错误：<code>java --server.port=8081 -jar app.jar</code>（<code>--server.port</code> 是 Spring 参数，必须在 <code>-jar</code> 后）</p>
<p>正确：<code>java -jar app.jar --server.port=8081</code></p>
</li>
<li><p><strong><code>-D</code> 参数与 <code>--</code> 参数的区别</strong>：</p>
<ul>
<li><code>-Dkey=value</code> 是 JVM 系统属性，可被 Spring 识别为配置，<strong>必须放在 <code>-jar</code> 前</strong>。</li>
<li><code>--key=value</code> 是 Spring 应用参数，<strong>必须放在 <code>-jar</code> 后</strong>，优先级高于 <code>-D</code> 参数和配置文件。</li>
</ul>
</li>
<li><p><strong>参数值包含空格或特殊字符</strong>：</p>
<p>若参数值含空格（如路径 <code>C:\Program Files</code>），需用引号包裹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar app.jar --file.path=<span class="string">&quot;C:\Program Files\data&quot;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="四、环境变量"><a href="#四、环境变量" class="headerlink" title="四、环境变量"></a>四、环境变量</h3><h4 id="1-本地开发环境（Windows-macOS-Linux）"><a href="#1-本地开发环境（Windows-macOS-Linux）" class="headerlink" title="1. 本地开发环境（Windows&#x2F;macOS&#x2F;Linux）"></a>1. 本地开发环境（Windows&#x2F;macOS&#x2F;Linux）</h4><h5 id="（1）临时设置（仅当前终端有效）"><a href="#（1）临时设置（仅当前终端有效）" class="headerlink" title="（1）临时设置（仅当前终端有效）"></a>（1）临时设置（仅当前终端有效）</h5><ul>
<li><p><strong>Windows（cmd 命令行）</strong>：</p>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> SPRING_PROFILES_ACTIVE=dev  # 设置环境变量</span><br><span class="line"><span class="built_in">set</span> SERVER_PORT=<span class="number">8081</span></span><br><span class="line">java -jar app.jar  # 启动应用，会读取上述变量</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>Windows（PowerShell）</strong>：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$env:SPRING_PROFILES_ACTIVE</span> = <span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="variable">$env:SERVER_PORT</span> = <span class="string">&quot;8081&quot;</span></span><br><span class="line">java <span class="literal">-jar</span> app.jar</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>macOS&#x2F;Linux（bash&#x2F;zsh）</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SPRING_PROFILES_ACTIVE=dev  <span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="built_in">export</span> SERVER_PORT=8081</span><br><span class="line">java -jar app.jar  <span class="comment"># 启动应用</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h5 id="（2）永久设置（重启终端后仍有效）"><a href="#（2）永久设置（重启终端后仍有效）" class="headerlink" title="（2）永久设置（重启终端后仍有效）"></a>（2）永久设置（重启终端后仍有效）</h5><ul>
<li><p><strong>Windows</strong>：</p>
<ol>
<li>右键 “此电脑”→“属性”→“高级系统设置”→“环境变量”。</li>
<li>在 “系统变量” 或 “用户变量” 中点击 “新建”，输入变量名（如 <code>SPRING_PROFILES_ACTIVE</code>）和值（如 <code>dev</code>）。</li>
<li>重启终端后生效。</li>
</ol>
</li>
<li><p><strong>macOS&#x2F;Linux</strong>：</p>
<ol>
<li><p>编辑终端配置文件（如 <code>~/.bashrc</code>、<code>~/.zshrc</code>，根据使用的 Shell 选择）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>
</li>
<li><p>在文件末尾添加环境变量：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> SPRING_PROFILES_ACTIVE=dev</span><br><span class="line"><span class="built_in">export</span> SERVER_PORT=8081</span><br></pre></td></tr></table></figure>
</li>
<li><p>生效配置：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 或重启终端</span></span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<h4 id="2-Docker-容器中设置环境变量"><a href="#2-Docker-容器中设置环境变量" class="headerlink" title="2. Docker 容器中设置环境变量"></a>2. Docker 容器中设置环境变量</h4><p>在 Docker 中运行 Spring Boot 应用时，可通过 <code>--env</code>（或 <code>-e</code>）参数设置环境变量，或在 <code>Dockerfile</code> 中预先定义。</p>
<h5 id="（1）启动容器时通过命令设置"><a href="#（1）启动容器时通过命令设置" class="headerlink" title="（1）启动容器时通过命令设置"></a>（1）启动容器时通过命令设置</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  -p 8080:8080 \</span><br><span class="line">  -e <span class="string">&quot;SPRING_PROFILES_ACTIVE=prod&quot;</span> \  <span class="comment"># 设置环境变量</span></span><br><span class="line">  -e <span class="string">&quot;SERVER_PORT=8080&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/app&quot;</span> \</span><br><span class="line">  --name myapp \</span><br><span class="line">  myapp:latest  <span class="comment"># 镜像名</span></span><br></pre></td></tr></table></figure>

<h5 id="（2）在-Dockerfile-中预先定义"><a href="#（2）在-Dockerfile-中预先定义" class="headerlink" title="（2）在 Dockerfile 中预先定义"></a>（2）在 Dockerfile 中预先定义</h5><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span>-jre-slim</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /app</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> target/app.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置环境变量（容器启动时可被覆盖）</span></span><br><span class="line"><span class="keyword">ENV</span> SPRING_PROFILES_ACTIVE=prod</span><br><span class="line"><span class="keyword">ENV</span> SERVER_PORT=<span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;-jar&quot;</span>, <span class="string">&quot;app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>启动时若通过 <code>-e</code> 传递新值，会覆盖 <code>Dockerfile</code> 中 <code>ENV</code> 定义的值。</p>
<h3 id="五、优先级总结（Spring-配置参数）"><a href="#五、优先级总结（Spring-配置参数）" class="headerlink" title="五、优先级总结（Spring 配置参数）"></a>五、优先级总结（Spring 配置参数）</h3><p>当同一配置（如 <code>server.port</code>）通过多种方式设置时，优先级从高到低为：</p>
<p><code>--key=value</code>（命令行后参数） &gt; <code>-Dkey=value</code>（JVM 参数） &gt; 环境变量 &gt; <code>application-{profile}.yml</code> &gt; <code>application.yml</code></p>
]]></content>
      <categories>
        <category>后档</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
</search>
